==== 2.Meaningful Names ====
1. 의도가 반영된 이름을 사용할 것
2. 잘못된 정보를 작성하지 말 것
	- 중의적인 이름으로 인한 오해 피하기
3. 이름 구별을 ‘유의미’하게 할 것
	- a1, a2 … 지양
	- 대상에 대한 명확한 묘사
4. 발음하기 쉬운 이름을 사용할 것
5. 검색하기 쉬운 이름 사용할 것
6. 변수에 필요한 정보만 쓸 것
	- 타입이나 scope 정보는 굳이 쓸 필요 없음
	- 접두사 쓰지말기. 쓸 만큼 큰 클래스가 아닐 것임
7. 기억에 의존하지 말기
8. 클래스 이름
	- 명사 O
	- 동사 X
9. 메서드 이름
	- 동사 O
10. 한 개념에 한 단어 사용할 것
11. 문제 영역과 해결 영역을 구별할 것
12. 유의미한 맥락 추가, 불필요한 맥락 제거
	- 굳이 필요하지 않은 접두사 쓰지 말기
	- 클래스, 함수, 네임스페이스를 통해 enclose하여 맥락 표시
==== 3.Functions ====
1. 작게 만들 것
	- 한 화면에 다 들어오게 함수 작성
	- 가독성을 위해 인덴트를 잘 맞추기
2. 기능을 하나로 할 것
3. 함수당 추상화 수준을 하나로 할 것
	- “\n” 이런거 들어간거랑 getHtml() 같은 높은 추상화 레벨을 같이 쓰지 말 것
4. 묘사적인 이름을 사용할 것
5. 함수 Argument
	- 적으면 적을수록 좋다.
6. Side Effect가 없도록 할 것
7. command와 query 분류할 것
	- 함수 안에서 if문으로 가르지 말고 query함수 하나, command 함수 하나 따로 만들기
8. error code를 리턴하지 말고 exception 활용
	- try-catch사용하기
9. 반복하지 말기
	- 중복을 줄이기
10. 구조적인 프로그래밍
	- 모든 함수는 하나의 entry와 하나의 exit이 있어야한다.
	- 함수가 클 경우 loop 중간에 break continue 쓰지 말 것
