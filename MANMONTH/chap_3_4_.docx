- 작고 예리한 팀이라는 개념이 가진 문제점은, ‘정말로 큰 시스템을 만드는 데 너무 오랜 시간이 걸린다’는 점이다. 30
- 효율과 개념적 일관성을 위해서는 설계와 구축에 소수 인원만이 관여하는 편이 낫지만, 큰 규모의 시스템을 만들려면 적절한 기간 내에 완성할 수 있을 만큼의 인원을 투입할 방법이 필요하다. 이렇듯 상충되는 두 가지를 어떻게 하면 조화시킬 수 있을까? 31
- 모든 팀원이 다 같이 문제에 달려드는 것이 아니라, 한 명이 문제를 해결해 가는 동안 다르 이들은 그 사람이 효율과 생산성을 높일 수 있도록 여러 방면에서 지원해 주는 것이다. 31
- 프로그래머 두 명을 통상적인 방식으로 묶은 팀과 외과의-부조종사로 이루어진 팀 간의 차이점에 주목하자. 36
    - 설계와 구현에서 각자의 일로 나누는 것이 아니라 두 사람이 전체 설계와 코드를 다 안다.
    - 상급자-하급자 관계
-  전체 시스템 역시 개념적 일관성을 가져야 하고, 그에 따라 한 명의 시스템 아키텍트가 시스템 전부를 하향식으로 설계할 필요가 있다는 정도로만 해두자. 38

- 나는 개념적 일관성이야말로 시스템 설계에서 가장 중요하게 고려할 사항이라 주장하고자 한다. 41
- 기능이나 단순함 어느 한 가지만으로는 좋은 설계를 만들어 낼 수 없다. 43
- 최대한 단순하고 명확(기능에 대응되는듯)하게 사용할 수 있는 시스템이 최상이다. 43
- 단순성과 명확성은 개념적 일관성에서 비롯되는 것이다. 44
- 귀족 정치 vs 민주주의 46
    - 아키텍트들은 새로운 귀족 계급이자 지적인 엘리트로서, 가엾고 우둔한 구현자들에게 해야 할 일을 알려주는 존재는 아닌가? 
    - 창조적인 일은 모두 이런 엘리트들의 몫으로 돌아가고 구현자들은 기계 부속품 같은 처지에 놓이는 것이 아닌가? 
    - 명세 개발을 소수에게 맡기는 것보다는 민주적 절차에 따라 모든 팀으로부터 아이디어를 모으는 것이 더 나은 제품을 만드는 길이 아닌가? 
- 시스템의 개념적 일관성이 사용의 용이성을 결정한다는 것이지 아키텍트들만이 설계에 대해 좋은 아이디어를 낼 것이라고 주장하는 것이 아니다. 46.
- 시스템이 개념적인 일관성을 가져야 한다면, 누군가 그 개념을 통제해야만 한다. 이것이 설령 귀족 정치라 해도 양해를 구할 일은 아니다. 46
- 구현 방안을 설계하는 것은, 시스템의 외부 명세를 설계할 때 만큼이나 많은 창의성과 새로운 아이디어, 기술적인 탁월함을 요구한다. 47
- 제약이 주어지지 않은 구현 그룹에서는 대부분의 고민과 토론이 아키텍처 결정에 관한 방향으로 흘러가며, 본래 의미의 구현 작업은 관심에서멀어지게 된다. (설계가 주어져 있는-이것을 제약이라고 말한듯- 상황에서 구현을 더 잘할 수 있다.) 47
- 구현자들은 기다리는 동안 무엇을 하는가? 48
    - 구현 담당들은 세 가지로 반론을 제기한다. 그 중 한가지… 아키텍처 팀이라는 좁다른 깔때기를 지나서 명세가 모습을 드러낼때까지, 많은 구현자들은 하는 일 없이 앉아 있어야 할 것이다. 49
    - 설계, 구현, 제품화 이 세 단계가 병렬로 진행될 수 있다고 하는데… 아닌것같은데. 억지 병렬로 할 수는 있겠으나 구현이 본래의 일을 하려면 설계가 다 되어야한다고 생각. 그냥 노느니 억지로라도 병렬로 하는 편이 낫긴하겠다.

- 개념적 일관성을 갖춘 시스템에는 단일한 철학이 반영되어 있어야 하고, 사용자가 접하게 될 명세는 소수의 머릿속에서 나와야 한다. 50
- 사실상, 폭 넓게 수평적으로 나뉜 일이 수직적 분업에 의해 대폭 줄어든 셈이고, 그 결과는 극단적으로 단순화된 커뮤니케이션과 향상된 개념적 일관성으로 나타난다. 50 
